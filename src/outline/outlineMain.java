/*
 * outlineMain.java
 *
 * Created on September 6, 2007, 1:46 PM
 *
 *
 */

package outline;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.jnlp.*;

/**
 *
 * @author  projects
 */
public class outlineMain extends JFrame implements PropertyChangeListener {
    //public ImageChooser ic=null;
    public Hashtable speciesDatabase=null;
    // public Species unknownSpecies=null;
    public outlineLogger ol=null;
    public outlineImageViewer oiv=null;
    public outlineOrganizer oo=null;
    public outlineRendered or = null;
    public OutlinesList osl=null;
    public fileInformation fi=null;
    //public FileContents cifc=null;
    //public FileContents ccfc=null;
    //public FileContents accessoryFilec=null;
    //public FileContents databaseImagesc=null;
    //public FileContents databaseFilec=null;
    //public FileContents wfilec=null;
    public File cif=null;
    public File ccf=null;
    public File accessoryFile=null;
    public File databaseImages = null;
    public File databaseFile = null;
    public File wfile = null;
    public BufferedImage bi = null;
    public JFileChooser fc=null;
    public int iw, ih;
    private ProgressMonitor progressMonitorW=null;
    private ProgressMonitor progressMonitorO=null;
    private ProgressMonitor progressMonitorQ=null;
    private ProgressMonitor progressMonitor=null;
    private Task task=null;
    private WriteTask wtask=null;
    private OpenTask otask=null;
    private QueryTask qtask=null;
    public String taskType;
    public Hashtable added=new Hashtable();
    public Vector badFiles = new Vector();
    public String fileType = null;
    public BufferedWriter out = null;
    public String[] id=null;
    public double[][][] unknowns=null;
    public double[][][] unknownHarms=null;
    public outlineSearchResults osr=null;
    public String[] imageFormats = {"jpg","gif"};
    public String[] outlineFormats = {"otl"};
    public String[] databaseFormats = {"otl","odb"};
    public String[] batchFormats = {"bdb"};
    public int nPoints = 100;
    public int nHarm = 40;
    public double convergence = 0.1;
    
    
    /** Creates new form outlineMain */
    public outlineMain() {
        initComponents();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainDesktop = new javax.swing.JDesktopPane();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        Open = new javax.swing.JMenu();
        openImage = new javax.swing.JMenuItem();
        openCoordinates = new javax.swing.JMenuItem();
        openDatabase = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenu();
        saveCoordinates = new javax.swing.JMenuItem();
        saveDatabase = new javax.swing.JMenuItem();
        saveOutlineImage = new javax.swing.JMenuItem();
        saveSearchResults = new javax.swing.JMenuItem();
        saveLog = new javax.swing.JMenuItem();
        Database = new javax.swing.JMenu();
        appendDatabase = new javax.swing.JMenuItem();
        createDatabase = new javax.swing.JMenuItem();
        uploadToDatabase = new javax.swing.JMenuItem();
        Batch = new javax.swing.JMenu();
        makeDatabaseFromImages = new javax.swing.JMenuItem();
        makeDatabaseFromCoordinates = new javax.swing.JMenuItem();
        quitOutlines = new javax.swing.JMenuItem();
        actionMenu = new javax.swing.JMenu();
        findOutlines = new javax.swing.JMenuItem();
        makeOutlineImage = new javax.swing.JMenuItem();
        performSearch = new javax.swing.JMenuItem();
        windowsMenu = new javax.swing.JMenu();
        outlineImageW = new javax.swing.JMenuItem();
        outlineRenderW = new javax.swing.JMenuItem();
        outlineOrganizerW = new javax.swing.JMenuItem();
        fileInformationW = new javax.swing.JMenuItem();
        outlineSearchResultsW = new javax.swing.JMenuItem();
        logW = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        outlineHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Outline");

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        Open.setText("Open");
        openImage.setText("Open Image...");
        openImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageActionPerformed(evt);
            }
        });

        Open.add(openImage);

        openCoordinates.setText("Open Outlines...");
        openCoordinates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCoordinatesActionPerformed(evt);
            }
        });

        Open.add(openCoordinates);

        openDatabase.setText("Open Database...");
        openDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDatabaseActionPerformed(evt);
            }
        });

        Open.add(openDatabase);

        fileMenu.add(Open);

        Save.setText("Save");
        saveCoordinates.setText("Save Outlines...");
        saveCoordinates.setEnabled(false);
        saveCoordinates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCoordinatesActionPerformed(evt);
            }
        });

        Save.add(saveCoordinates);

        saveDatabase.setText("Save Database...");
        saveDatabase.setEnabled(false);
        saveDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDatabaseActionPerformed(evt);
            }
        });

        Save.add(saveDatabase);

        saveOutlineImage.setText("Save Rendered Outlines...");
        saveOutlineImage.setEnabled(false);
        saveOutlineImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOutlineImageActionPerformed(evt);
            }
        });

        Save.add(saveOutlineImage);

        saveSearchResults.setText("Save Search Results...");
        saveSearchResults.setEnabled(false);
        saveSearchResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSearchResultsActionPerformed(evt);
            }
        });

        Save.add(saveSearchResults);

        saveLog.setText("Save Log...");
        saveLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLogActionPerformed(evt);
            }
        });

        Save.add(saveLog);

        fileMenu.add(Save);

        Database.setText("Database");
        appendDatabase.setText("Append Database...");
        appendDatabase.setEnabled(false);
        appendDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appendDatabaseActionPerformed(evt);
            }
        });

        Database.add(appendDatabase);

        createDatabase.setText("Create Database...");
        createDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseActionPerformed(evt);
            }
        });

        Database.add(createDatabase);

        uploadToDatabase.setText("Upload to Database...");
        uploadToDatabase.setEnabled(false);
        uploadToDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadToDatabaseActionPerformed(evt);
            }
        });

        Database.add(uploadToDatabase);

        fileMenu.add(Database);

        Batch.setText("Batch");
        makeDatabaseFromImages.setText("Generate Database From Images...");
        makeDatabaseFromImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeDatabaseFromImagesActionPerformed(evt);
            }
        });

        Batch.add(makeDatabaseFromImages);

        makeDatabaseFromCoordinates.setText("Make Database From Coordinate Files...");
        makeDatabaseFromCoordinates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeDatabaseFromCoordinatesActionPerformed(evt);
            }
        });

        Batch.add(makeDatabaseFromCoordinates);

        fileMenu.add(Batch);

        quitOutlines.setText("Quit");
        quitOutlines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitOutlinesActionPerformed(evt);
            }
        });

        fileMenu.add(quitOutlines);

        mainMenu.add(fileMenu);

        actionMenu.setText("Action");
        findOutlines.setText("Find Outlines...");
        findOutlines.setEnabled(false);
        findOutlines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findOutlinesActionPerformed(evt);
            }
        });

        actionMenu.add(findOutlines);

        makeOutlineImage.setText("Render Outline Image...");
        makeOutlineImage.setEnabled(false);
        makeOutlineImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeOutlineImageActionPerformed(evt);
            }
        });

        actionMenu.add(makeOutlineImage);

        performSearch.setText("Perform Search...");
        performSearch.setEnabled(false);
        performSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performSearchActionPerformed(evt);
            }
        });

        actionMenu.add(performSearch);

        mainMenu.add(actionMenu);

        windowsMenu.setText("Windows");
        windowsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowsMenuActionPerformed(evt);
            }
        });

        outlineImageW.setText("Current Image");
        outlineImageW.setEnabled(false);
        outlineImageW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineImageWActionPerformed(evt);
            }
        });

        windowsMenu.add(outlineImageW);

        outlineRenderW.setText("Outline Image");
        outlineRenderW.setEnabled(false);
        outlineRenderW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineRenderWActionPerformed(evt);
            }
        });

        windowsMenu.add(outlineRenderW);

        outlineOrganizerW.setText("Outline Viewer");
        outlineOrganizerW.setEnabled(false);
        outlineOrganizerW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineOrganizerWActionPerformed(evt);
            }
        });

        windowsMenu.add(outlineOrganizerW);

        fileInformationW.setText("Image File Information");
        fileInformationW.setEnabled(false);
        fileInformationW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileInformationWActionPerformed(evt);
            }
        });

        windowsMenu.add(fileInformationW);

        outlineSearchResultsW.setText("Current Search Results");
        outlineSearchResultsW.setEnabled(false);
        outlineSearchResultsW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineSearchResultsWActionPerformed(evt);
            }
        });

        windowsMenu.add(outlineSearchResultsW);

        logW.setText("Log");
        logW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logWActionPerformed(evt);
            }
        });

        windowsMenu.add(logW);

        mainMenu.add(windowsMenu);

        helpMenu.setText("Help");
        outlineHelp.setText("Help...");
        outlineHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineHelpActionPerformed(evt);
            }
        });

        helpMenu.add(outlineHelp);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDesktop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void uploadToDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadToDatabaseActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_uploadToDatabaseActionPerformed
    
    private void outlineHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineHelpActionPerformed
// TODO add your handling code here:
        try {
            // Lookup the javax.jnlp.BasicService object
            BasicService bs = (BasicService)ServiceManager.lookup("javax.jnlp.BasicService");
            try {
                // Invoke the showDocument method
                if(!bs.showDocument(new URL("http://loco.biosci.arizona.edu/hearn/Outline/Help.html")))
                    JOptionPane.showMessageDialog(this,"Web link could not be displayed.");
            } catch (HeadlessException ex) {
                ex.printStackTrace();
            } catch (MalformedURLException ex) {
                ex.printStackTrace();
            }
            return;
            
        } catch(UnavailableServiceException ue) {
            // Service is not supported
            JOptionPane.showMessageDialog(this, "A complete tutorial is available at http://loco.biosci.arizona.edu/hearn/Outline/Help.html.");
            return;
        }
    }//GEN-LAST:event_outlineHelpActionPerformed
    
    private void windowsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowsMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_windowsMenuActionPerformed
    
    public String generateSearchResultsText() {
        try{
            String rs = new String();
            rs += "Search results " + Utils.getDate() + "\n";
            if(ccf!=null)
                rs += "Unknown outlines file: " + ccf.getPath() + "\n";
            else if(cif!=null)
                rs += "Unknown outlines file: " + cif.getPath() + "\n";
           /* else if(cifc!=null)
                rs += "Unknown outlines file: " + cifc.getName();
            else if(ccfc!=null)
                rs += "Unknown outlines file: " + ccfc.getName();
            */
            if(databaseFile!=null)
                rs += "Database: " + this.databaseFile.getPath() + "\n";
            /*
            else if(databaseFilec!=null)
                rs += "Database: " + this.databaseFilec.getName() + "\n";
             */
            for(int i=0; i<id.length; i++)
                rs += id[i] + "\n";
            
            return rs;
        } catch(Exception e) {e.printStackTrace(); }
        return null;
    }
    
    private void saveSearchResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSearchResultsActionPerformed
        fileType = "res";
        saveFile();
    }//GEN-LAST:event_saveSearchResultsActionPerformed
    
    private void outlineSearchResultsWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineSearchResultsWActionPerformed
        if(osr==null) {
            outlineSearchResultsW.setEnabled(false);
            showMessage("Unable to show search results");
        } else {
            osr.dispose();
            osr.setVisible(true);
            mainDesktop.add(osr);
            try {
                osr.setSelected(true);
            } catch (java.beans.PropertyVetoException ignore) {}    // TODO add your handling code here:
        }
    }//GEN-LAST:event_outlineSearchResultsWActionPerformed
    
    private void createDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseActionPerformed
        try {
            appendDatabase(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        this.saveDatabase.setEnabled(true);
        if(oo.p!=null) this.performSearch.setEnabled(true);
    }//GEN-LAST:event_createDatabaseActionPerformed
    
    private void scaleTranslateSampleDatabase() {
        //consolidate knowns: sample, translate, scale
        //find beginning
        
        while(osl.previous!=null)
            osl=osl.previous;
        while(osl.next!=null) {
            //System.out.println("YOYO");
            if(osl.centered_normalized!=2 || osl.coordinatesSST==null) {
                
                osl.centroidDistance=Outlines.findCentroidDistance(osl.coordinates);
                osl.coordinatesSST = Outlines.scalePoints(osl.centroidDistance,osl.coordinates);
                osl.coordinatesSST = Outlines.translateCoordinates(osl.coordinatesSST,Outlines.findCentroid(osl.coordinatesSST));
                osl.coordinatesSST = Outlines.samplePoints(osl.coordinatesSST, nPoints);
                osl.centered_normalized=2;
                //if(osl.coordinatesSST==null) System.out.println("NULL VALUE!!");
                //for(int i=0; i<osl.coordinatesSST[0].length; i++) System.out.println(Double.toString(osl.coordinates[0][i]) + "," + Double.toString(osl.coordinates[1][i]));
            }
            osl = osl.next;
        }
        if(osl.centered_normalized!=2 || osl.coordinatesSST==null) {
            osl.centroidDistance=Outlines.findCentroidDistance(osl.coordinates);
            osl.coordinatesSST = Outlines.scalePoints(osl.centroidDistance,osl.coordinates);
            osl.coordinatesSST = Outlines.translateCoordinates(osl.coordinatesSST,Outlines.findCentroid(osl.coordinatesSST));
            osl.coordinatesSST = Outlines.samplePoints(osl.coordinatesSST, nPoints);
            osl.centered_normalized=2;
            //if(osl.coordinatesSST==null) System.out.println("NULL VALUE!!");
        }
    }
    
    private void performSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performSearchActionPerformed
        
        try {
            //showMessage("Query database");
            progressMonitorO=null;
            progressMonitor=null;
            progressMonitorW=null;
            progressMonitorQ = new ProgressMonitor(this, "Querying database...", "", 0, 100);
            progressMonitorQ.setProgress(0);
            qtask = new QueryTask();
            qtask.addPropertyChangeListener(this);
            qtask.execute();
            //progressMonitorQ.close();
            //progressMonitorQ=null;
            //qtask=null;
        } catch (Exception ex) {
            ex.printStackTrace();
            showMessage("Unable to perform identification!");
        }
        
        
    }//GEN-LAST:event_performSearchActionPerformed
    
    private void makeDatabaseFromCoordinatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeDatabaseFromCoordinatesActionPerformed
        synchronized(this) {
            osl=null;
            
            File[] files = null;
            
            files = getTextFiles(new FileNameExtensionFilter("Batch Database File", "otl", "odb"));
            if(files!=null) {
                for(int i=0; i<files.length; i++) {
                    OutlinesList tosl = Outlines.inputCoordinatesFromFile(files[i].getPath(), '\t');
                    if(tosl!=null) {
                        if(osl==null)
                            osl=tosl;
                        else {
                            while(tosl.previous!=null)
                                tosl=tosl.previous;
                            while(osl.next!=null)
                                osl = osl.next;
                            osl.next=tosl;
                            tosl.previous=osl;
                            while(osl.next!=null)
                                osl=osl.next;
                        }
                    }
                }
            }
            if(osl==null) showMessage("No coordinates were read, although files were found.");
            else {
                showMessage("Preparing coordinates. This may take a few minutes. Push ok to continue.");
                try {
                    
                    prepareSpeciesDatabase(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    showMessage("There was an error parsing leaf coordinates");
                }
            }
            
            //}
            if(files!=null) // || filesc!=null) {
            {
                showMessage("Database has been updated with outlines from provided files");
                saveDatabase.setEnabled(true);
            }
        }
        
    }//GEN-LAST:event_makeDatabaseFromCoordinatesActionPerformed
    
    private void makeDatabaseFromImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeDatabaseFromImagesActionPerformed
        synchronized(this) {
            osl=null;
            showMessage("Please make a tab-delimited, text spreadsheet following the format of files.bdb");
            databaseImages = getTextFile(new FileNameExtensionFilter("Batch Database File", "bdb"));
            
            taskType="generate database";
            progressMonitor = new ProgressMonitor(this,"Generating Database... This may take several minutes.","", 0, 100);
            progressMonitor.setProgress(0);
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
            //taskType=null;
            saveDatabase.setEnabled(true);
            //task=null;
        }
    }//GEN-LAST:event_makeDatabaseFromImagesActionPerformed
    
    class WriteTask extends SwingWorker<Void, Void> {
        
        
        @Override
        public synchronized Void doInBackground() {
            
            Save.setVisible(false);
            //saveCoordinates.setVisible(false);
            //saveDatabase.setVisible(false);
            //saveOutlineImage.setVisible(false);
            //saveLog.setVisible(false);
            
            int progress = 0;
            progress=1;
            
            String path = wfile.getPath();
            
            
            
            
            try {
                
                if(fileType.equals("ri")) {
                    if(!Utils.getExtension(wfile).equals("gif"))
                        path += ".gif";
                    Outlines.renderBufferedImage(bi, "gif", path);
                } else {
                    
                    if(!Utils.getExtension(wfile).equals(fileType)) {
                        System.out.println("The file type is " + fileType + " but the found file type is " + Utils.getExtension(wfile));
                        path += "." + fileType;
                    }
                    if(fileType.equals("otl")) {
                        writeFile(path,generateOutlineFileText());
                    } else if(fileType.equals("res")) {
                        writeFile(path,generateSearchResultsText());
                    } else if(fileType.equals("odb")) {
                        Thread.sleep(1000);
                        //System.out.println("Writing database file");
                        int dbSize=0;
                        
                        String[] output;
                        
                        if(osl==null) {
                            showMessage("No database is loaded. No database saved.");
                            return null;
                        }
                        while(osl.previous!=null) osl = osl.previous;
                        while(osl.next!=null) {
                            osl = osl.next;
                            dbSize++;
                        }
                        dbSize++;
                        while(osl.previous!=null) osl = osl.previous;
                        //if(osl==null) System.out.println("Error recovering database coordinate information");
                        output = new String[dbSize];
                        //System.out.println("Writing coordinate information");
                        int cnt=1;
                        progress = (int)(((double)cnt/(double)dbSize*2)*(double)100);
                        setProgress(progress);
                        output[0] = Outlines.coordinateInformation(osl);
                        
                        while(osl.next!=null && !isCancelled()) {
                            osl=osl.next;
                            //System.out.println("Writing coordinate information");
                            output[cnt] = Outlines.coordinateInformation(osl);
                            progress = (int)(((double)cnt/(double)dbSize)*(double)100)-1; //assures progress bar not complete until final save
                            if(progress<0) progress=0;
                            setProgress(Math.min(progress,100));
                            cnt++;
                            //System.out.println("Count is now " + cnt + " and database size is " + dbSize + " and progress is " + progress);
                        }
                        //System.out.println("Count is now " + cnt + " and database size is " + dbSize + " and progress is " + progress);
                        try {
                            out = new BufferedWriter(new FileWriter(path));
                            for(int i=0; i<output.length && !isCancelled(); i++) {
                                out.write(output[i]);
                            }
                            out.close();
                        } catch (IOException e) {
                        }
                        setProgress(100);
                    } else if(fileType.equals("log")) {
                        writeFile(path,ol.loggerTextArea.getText());
                    } else {
                        showMessage("File type " + fileType + " not supported. No file saved.");
                    }
                }
                
                //while (progress < 100 && !isCancelled()) {
                //Sleep for up to one second.
                // Thread.sleep(random.nextInt(1000));
                //Make random progress.
                //progress += random.nextInt(10);
                //setProgress(Math.min(progress, 100));
                //}
            } catch (Exception ignore) {ignore.printStackTrace();}
            fileType=null;
            if(progressMonitorW!=null) {
                progressMonitorW.close();
                progressMonitorW=null;
            }
            Save.setVisible(true);
            //saveCoordinates.setVisible(true);
            //saveDatabase.setVisible(true);
            //saveOutlineImage.setVisible(true);
            //saveLog.setVisible(true);
            return null;
            
        }
        
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            if(wfile!=null) showMessage("Saving " + wfile.getPath() + " is complete.");
            wfile=null;
            //if(progressMonitor!=null)
            //{
            //progressMonitor.setProgress(0);
            //}
        }
    }
    
    class OpenTask extends SwingWorker<Void, Void> {
        int nO = 0;
        
        @Override
        public synchronized Void doInBackground() {
            
            int progress = 0;
            OutlinesList ol = new OutlinesList();
            setProgress(progress);
            progress=1;
            setProgress(progress);
            Open.setVisible(false);
            Batch.setVisible(false);
            //openCoordinates.setVisible(false);
            //openDatabase.setVisible(false);
            //openImage.setVisible(false);
            
            try {
                int tot=1;
                BufferedReader in = null;
                /*
                if(databaseFilec!=null) {
                    tot = Utils.getLineCount(new BufferedReader(new InputStreamReader(databaseFilec.getInputStream())));
                    in = new BufferedReader(new InputStreamReader(databaseFilec.getInputStream()));
                } else {
                 */
                tot = Utils.getLineCount(databaseFile.getPath());
                in = new BufferedReader(new FileReader(databaseFile));
                //}
                
                String line = in.readLine();
                if(line==null) return null;
                if(line.length()<=0) return null;
                String temp = null;
                int cnt=1;
                while(line!=null && !isCancelled()) {
                    //if(cnt%100==0) showMessage("Eek");
                    nO++;
                    ol.taxon = line.substring(0,line.indexOf('\t')).trim();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.label = line.substring(0,line.indexOf('\t')).trim();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    //System.out.println("Label is " + ol.label + " and taxon is " + ol.taxon);
                    ol.part_name = line.substring(0,line.indexOf('\t')).trim();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.number = Integer.valueOf(line.substring(0,line.indexOf('\t')).trim()).intValue();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.dimensionality = Integer.valueOf(line.substring(0,line.indexOf('\t')).trim()).intValue();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.centered_normalized = Integer.valueOf(line.substring(0,line.indexOf('\t')).trim()).intValue();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.pixelArea = Integer.valueOf(line.substring(0,line.indexOf('\t')).trim()).intValue();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.pixelPerCentimeter = Double.valueOf(line.substring(0,line.indexOf('\t')).trim()).doubleValue();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.imageFile = line.substring(0,line.indexOf('\t')).trim();
                    line = line.substring(line.indexOf('\t')+1).trim();
                    ol.coordinates = new double[ol.dimensionality][ol.number];
                    for(int i=0;i<ol.number;i++) {
                        for(int t=0; t<ol.dimensionality; t++) {
                            if(line.indexOf('\t')>=0) {
                                temp = line.substring(0,line.indexOf('\t')).trim();
                                //if(!temp.matches("\\."))
                                //  temp += ".0";
                                //System.out.println(temp);
                                ol.coordinates[t][i]=Double.valueOf(temp).doubleValue();
                                line = line.substring(line.indexOf('\t')+1).trim();
                            } else {
                                line = line.trim();
                                //if(!line.matches("\\."))
                                //  line+=".0";
                                //System.out.println(line);
                                ol.coordinates[t][i]=Double.valueOf(line).doubleValue();
                            }
                        }
                    }
                    cnt++;
                    progress = (int)(((double)cnt/(double)tot)*(double)50);
                    //System.out.println("Progress is " + progress);
                    setProgress(progress);
                    line = in.readLine();
                    if(line!=null) {
                        ol.next = new OutlinesList();
                        ol.next.previous = ol;
                        ol = ol.next;
                    }
                }
            } catch (Exception ignore) { showMessage(ignore.getMessage() + " EEEK EXCEPTION CAUGHT");}
            // showMessage("Done with input");
            osl = null;
            osl = new OutlinesList();
            osl = ol;
            
            
            if(osl==null) {
                showMessage("Database file was opened, but no coordinates were readable.");
                //System.out.println("OSL is null");
            }
            
            else {
                //System.out.println("Setting up database");
                setProgress(50);
                //System.out.println("Beginning fun stuff");
                speciesDatabase=null;
                speciesDatabase=new Hashtable();
                int totlvs=0;
                
                while(osl.previous!=null) {
                    osl=osl.previous;
                    totlvs++;
                }
                //System.out.println("There are " + totlvs + " leaves.");
                
                int clvs=0;
                while(osl.next!=null) {
                    Species t = (Species)speciesDatabase.get(osl.taxon);
                    //System.out.println("Handling leaf " + clvs + ": " + osl.taxon);
                    if(t==null) {
                        //System.out.println("Dealing with A" + osl.taxon);
                        t=new Species(osl.taxon,osl.coordinates,nPoints,nHarm);
                        //System.out.println("Dealing with B" + osl.taxon);
                        
                    } else {
                        t.appendCoordinates(osl.taxon,osl.coordinates);
                    }
                    //System.out.println("Dealing with " + osl.taxon);
                    speciesDatabase.put(osl.taxon,t);
                    //System.out.println("setting progress A" + osl.taxon);
                    osl=osl.next;
                    //System.out.println("setting progress B" + osl.taxon);
                    clvs++;
                    //System.out.println("setting progress C" + osl.taxon);
                    //System.out.println("setting progress D" + osl.taxon);
                    setProgress(50+(int)(((double)clvs/(double)totlvs)*(double)50));
                    //System.out.println("done setting progress " + osl.taxon);
                }
                
                //System.out.println("Handling last leaf");
                //handle last one
                //System.out.println("Handling leaf " + clvs + ": " + osl.taxon);
                Species t = (Species)speciesDatabase.get(osl.taxon);
                if(t==null) {
                    t=new Species(osl.taxon,osl.coordinates,nPoints,nHarm);
                    
                } else {
                    t.appendCoordinates(osl.taxon,osl.coordinates);
                }
                
                speciesDatabase.put(osl.taxon,t);
                try {
                    //showMessage("Preparing database. Click ok to continue.");
                    prepareSpeciesDatabase(false);
                } catch (Exception ex) {
                    showMessage("There was an error parsing leaf coordinates");
                    ex.printStackTrace();
                }
                setProgress(100);
            }
            //showMessage("Done assigning outlines");
            
            //System.out.println("skipped it all");
            
            progressMonitorO.close();
            progressMonitorO=null;
            //showMessage("Done closing monitor");
            //Open.setVisible(true);
            //Batch.setVisible(true);
            //showMessage("Done inputting database");
            //openCoordinates.setVisible(true);
            //openDatabase.setVisible(true);
            //openImage.setVisible(true);
            return null;
        }
        
        @Override
        public void done() {
            //System.out.println("In done");
            try{
                //showMessage("Beginning Done method");
                Toolkit.getDefaultToolkit().beep();
                //showMessage("Done beeping");
                if(osl==null) {
//                    if(databaseFilec!=null) showMessage("Unable to load coordinates from " + databaseFilec.getName() + ". Database is now empty.");
                    //else
                    showMessage("Unable to load coordinates from " + databaseFile.getName() + ". Database is now empty.");
                    saveDatabase.setEnabled(false);
                } else {
                    //if(databaseFilec!=null) showMessage("Database is now set to " + databaseFilec.getName() + " with " + nO + " outlines.");
                    //else
                    showMessage("Database is now set to " + databaseFile.getName() + " with " + nO + " outlines.");
                    Open.setVisible(true);
                    Batch.setVisible(true);
                    saveDatabase.setEnabled(true);
                    
                    if(oo!=null) if(oo.p!=null) performSearch.setEnabled(true);
                    
                }
            } catch(Exception e){e.printStackTrace(); showMessage("Error: " + e.getMessage()); }
            //progressMonitor.setProgress(0);
        }
    }
    
    class QueryTask extends SwingWorker<Void, Void> {
        
        @Override
        public synchronized Void doInBackground() {
            
            int progress = 0;
            setProgress(progress);
            progress=1;
            setProgress(progress);
            Open.setVisible(false);
            Batch.setVisible(false);
            performSearch.setVisible(false);
            outlineSearchResultsW.setVisible(false);
            
            
            try {
                //System.out.println("Converting unknown polygons");
                //readjusts the indices to account for bad outlines;
                unknowns = Outlines.convertPolygons(oo.p, nPoints, oo.keep);
                unknownHarms = new double[unknowns.length][2][nPoints];
                //System.out.println("Scaling and translating coordinates");
                int tlr = 0;
                double[][] rf1 = new double[2][nPoints];
                for(int i=0; i<oo.keep.length; i++)
                    if(!oo.keep[i]) tlr++;
                for(int i=0; i<oo.p.length-tlr;i++) {
                    if(oo.keep[i]) {
                        //System.out.println("Running coordinates " + i);
                        unknowns[i] = Outlines.scalePoints(Outlines.findCentroidDistance(unknowns[i]),unknowns[i]);
                        unknowns[i] = Outlines.translateCoordinates(unknowns[i],Outlines.findCentroid(unknowns[i]));
                        Outlines.makeRadialFunction(unknowns[i], rf1);
                        unknownHarms[i] =  Outlines.getHarmonics(rf1, nHarm);
                        
                    }
                }
                
                if(speciesDatabase==null || osl==null || unknowns==null || nHarm<=0 || convergence<0 || convergence>1) showMessage("Identification failed");
                else {
                    Set keys = speciesDatabase.keySet();
                    Iterator iter = keys.iterator();
                    Vector output = new Vector();
                    
                    int tlr1=0;
                    for(int i=0; i<oo.keep.length; i++)
                        if(oo.keep[i]) tlr1++;
                    
                    while (iter.hasNext()) {
                        Species t1 = (Species)speciesDatabase.get(iter.next());
                        double proDist=0.0;
                        double fourDist=0.0;
                        double combDist=0.0;
                        for(int i=0; i<unknowns.length; i++) if(oo.keep[i]) {
                            {
                                proDist+=Outlines.calculateProcrustesDistance(t1.aveCoords,unknowns[i],false);
                                fourDist+=Outlines.calculateFourierDistance(unknownHarms[i][0],unknownHarms[i][1],t1.aveHarmonics[0],t1.aveHarmonics[1]);
                                combDist+=9.4*proDist+fourDist;
                                //System.out.println("Species: " + t1.name + " leaf " + i + " " + proDist + " " + combDist);
                                
                            }
                        }
                        combDist /= (10*tlr1);
                        
                        System.out.println("Species: " + t1.name + " " + combDist + " " + fourDist + " " + proDist + " " + tlr1);
                        output.add(combDist + "\t" + t1.name);
                        
                    }
                    id = null;
                    id = (String[]) output.toArray(new String[0]);
                    Arrays.sort(id);
                    
                }
                progress=100;
                setProgress(progress);
                
                
            } catch (Exception ignore) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                ol.loggerTextArea.append("Opening file cancelled by user.\n");
                ignore.printStackTrace(pw);
                ol.loggerTextArea.append(new String(sw.getBuffer()));
                showMessage("Ran into a problem!"); }
            
            System.out.println("Query complete");
            if(progressMonitorQ!=null) progressMonitorQ.close();
            progressMonitorQ=null;
            return null;
        }
        
        @Override
        public void done() {
            
            Toolkit.getDefaultToolkit().beep();
            if(id==null) showMessage("Search failed. No output list available.");
            else if(unknowns==null) showMessage("Search failed. Unknown outlines not available.");
            
            Open.setVisible(true);
            Batch.setVisible(true);
            performSearch.setVisible(true);
            if(osr!=null) {
                osr.dispose();
                osr=null;
            }
            if(!(id==null) && !(unknowns==null)) {
                outlineSearchResultsW.setVisible(true);
                outlineSearchResultsW.setEnabled(true);
                saveSearchResults.setEnabled(true);
                //System.out.println("Making taxa hash");
                Hashtable taxa = new Hashtable();
                taxa = Outlines.sortSSTOutlinesByTaxon(speciesDatabase);
                //System.out.println("Finished making taxa hash");
                
                osr = new outlineSearchResults(id, unknowns, taxa);
                osr.setVisible(true);
                mainDesktop.add(osr);
                try {
                    osr.setSelected(true);
                } catch (java.beans.PropertyVetoException ignore) {}
                
            }
            //progressMonitor.setProgress(0);
            
        }
    }
    
    class Task extends SwingWorker<Void, Void> {
        
        
        
        @Override
        public synchronized Void doInBackground() {
            Open.setVisible(false);
            Batch.setVisible(false);
            int progress = 0;
            setProgress(progress);
            progress=1;
            if(taskType.equals("generate database")) {
                String fileName = null;
                
                fileName = databaseImages.getPath();
                setProgress(progress);
                OutlinesList tosl = null;
                //System.out.println("Beginning task");
                try {
                    //Thread.sleep(1000);
                    BufferedReader in = null;
                    
                    in = new BufferedReader(new FileReader(databaseImages));
                    String line = in.readLine();
                    if(line==null) {
                        showMessage("Image list file " + fileName + " was empty.");
                        setProgress(100);
                        return null;
                    }
                    if(line.length()<=0) {
                        showMessage("Image list file " + fileName + " was empty.");
                        setProgress(100);
                        return null;
                    }
                    String temp = null;
                    int tot = 1;
                    while(line!=null) {
                        line = in.readLine();
                        tot++;
                    }
                    in.close();
                    //System.out.println("The total number of image files to process is " + tot);
                   /* if(databaseImagesc!=null) in = new BufferedReader(new InputStreamReader(databaseImagesc.getInputStream()));
                    else
                    */
                    in = new BufferedReader(new FileReader(databaseImages));
                    line = in.readLine(); // header
                    line = in.readLine(); // first line
                    if(line==null) {
                        showMessage("!Image list file " + fileName + " was empty.");
                        setProgress(100);
                        return null;
                    }
                    if(line.length()<=0) {
                        showMessage("!Image list file " + fileName + " was empty.");
                        setProgress(100);
                        return null;
                    }
                    
                    int cnt=1;
                    
                    while(line!=null && !isCancelled()) {
                        
                        String[] stuff = line.split("\t");
                        String iFile = stuff[0];
                        String species = stuff[1];
                        int expNum = Integer.parseInt(stuff[2]);
                        double pixS = Double.parseDouble(stuff[3]);
                        String inits = stuff[4];
                        String part = stuff[5];
                        int dim = Integer.parseInt(stuff[6]);
                        Polygon[] ip = Outlines.findCoordinates(iFile);
                        //System.out.println("Processing " + iFile);
                        if(ip==null) {
                            showMessage("Could not extract outlines from file " + iFile + ". Quitting batch process.");
                            return null;
                        } else if(ip.length!=expNum) {
                            badFiles.add(iFile);
                        } else for(int i=0; i<ip.length; i++) {
                            double[][] coordinates = Outlines.extractCoordinates(ip[i]);
                            double centroidDistance = Outlines.findCentroidDistance(coordinates);
                            int pixelArea = Outlines.findArea(ip[i]);
                            if(tosl==null)
                                tosl=new OutlinesList(species, iFile, centroidDistance, pixelArea, pixS,(Integer.toString(cnt)+inits+Integer.toString(i)),ip[i].npoints,part,0,dim,coordinates);
                            else {
                                OutlinesList nosl = new OutlinesList(species, iFile, centroidDistance, pixelArea, pixS,(Integer.toString(cnt)+inits+Integer.toString(i)),ip[i].npoints,part,0,dim,coordinates);
                                tosl.next = nosl;
                                nosl.previous=tosl;
                                tosl=tosl.next;
                            }
                        }
                        cnt++;
                        progress = (int)(((double)cnt/(double)tot)*(double)100);
                        //System.out.println("Progress is " + progress);
                        setProgress(Math.min(progress,100));
                        line = in.readLine();
                    }
                    in.close();
                    setProgress(100);
                    if(osl==null) {
                        osl = new OutlinesList();
                        osl = tosl;
                    } else {
                        while(tosl.previous!=null) tosl = tosl.previous;
                        tosl.previous = osl;
                        osl.next=tosl;
                        while(osl.next!=null) osl = osl.next;
                    }
                    
                    if(osl==null) showMessage("Database file was opened, but no coordinates were readable.");
                    else {
                        
                        setProgress(0);
                        speciesDatabase=null;
                        speciesDatabase=new Hashtable();
                        int totlvs=0;
                        while(osl.previous!=null) {
                            osl=osl.previous;
                            totlvs++;
                        }
                        int clvs=0;
                        while(osl.next!=null) {
                            Species t = (Species)speciesDatabase.get(osl.taxon);
                            if(t==null) {
                                t=new Species(osl.taxon,osl.coordinates,nPoints,nHarm);
                                
                            } else {
                                t.appendCoordinates(osl.taxon,osl.coordinates);
                            }
                            
                            speciesDatabase.put(osl.taxon,t);
                            osl.coordinatesSST=t.outlines.coordinatesSST;
                            osl=osl.next;
                            clvs++;
                            setProgress((int)(((double)clvs/(double)totlvs)*(double)200));
                        }
                        
                        //handle last one
                        Species t = (Species)speciesDatabase.get(osl.taxon);
                        if(t==null) {
                            t=new Species(osl.taxon,osl.coordinates,nPoints,nHarm);
                            
                        } else {
                            t.appendCoordinates(osl.taxon,osl.coordinates);
                        }
                        
                        speciesDatabase.put(osl.taxon,t);
                        try {
                            prepareSpeciesDatabase(false);
                        } catch (Exception ex) {
                            showMessage("There was an error parsing leaf coordinates");
                            ex.printStackTrace();
                        }
                        setProgress(100);
                    }
                    
                    tosl=null;
                    Enumeration e = badFiles.elements();
                    String badf = new String();
                    while (e.hasMoreElements()) {
                        badf += (String)e.nextElement() + "\n";
                    }
                    showMessage("Database generation complete.\nDatabase now updated with outlines in " + databaseImages.getName() + "\nThe following files did not load correctly.\nPlease please append these file coordinates to the database individually:\n" + badf);
                    textDisplayFrame tdf = new textDisplayFrame("Image files with problems",badf);
                    
                    tdf.setVisible(true);
                    mainDesktop.add(tdf);
                    try {
                        tdf.setSelected(true);
                    } catch (java.beans.PropertyVetoException ignore) {}
                    saveDatabase.setEnabled(true);
                    badFiles=null;
                    badFiles = new Vector();
                } catch (Exception ignore) {
                    showMessage("Unable to complete batch process. Database unchanged.");
                    ignore.printStackTrace();
                }
                progressMonitor.close();
                progressMonitor=null;
                return null;
            } else {
                try {
                    Random random = new Random();
                    Thread.sleep(1000);
                    while (progress < 100 && !isCancelled()) {
                        //Sleep for up to one second.
                        Thread.sleep(random.nextInt(1000));
                        //Make random progress.
                        progress += random.nextInt(10);
                        setProgress(Math.min(progress, 100));
                    }
                } catch (InterruptedException ignore) {}
                progressMonitor.close();
                progressMonitor=null;
                return null;
            }
        }
        
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            Open.setVisible(true);
            Batch.setVisible(true);
            //progressMonitor.setProgress(0);
        }
    }
    
    /**
     * Invoked when task's progress property changes.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName() ) {
            //System.out.println("Property change");
            int progress = (Integer) evt.getNewValue();
            String message =
                    String.format("Completed %d%%\n", progress);
            
            if(progressMonitor!=null) {
                progressMonitor.setProgress(progress);
                progressMonitor.setNote(message);
                if (taskType.equals("generate database") && (progressMonitor.isCanceled() || task.isDone()))
                    Toolkit.getDefaultToolkit().beep();
                if (progressMonitor.isCanceled()) {
                    task.cancel(true);
                }
            } else if(progressMonitorW!=null) {
                progressMonitorW.setProgress(progress);
                progressMonitorW.setNote(message);
                if (progressMonitorW.isCanceled() || wtask.isDone())
                    Toolkit.getDefaultToolkit().beep();
                if (progressMonitorW.isCanceled()) {
                    wtask.cancel(true);
                }
            } else if(progressMonitorO!=null) {
                progressMonitorO.setProgress(progress);
                progressMonitorO.setNote(message);
                if (progressMonitorO.isCanceled() || otask.isDone())
                    Toolkit.getDefaultToolkit().beep();
                if (progressMonitorO.isCanceled()) {
                    otask.cancel(true);
                }
            } else if(progressMonitorQ!=null) {
                progressMonitorQ.setProgress(progress);
                progressMonitorQ.setNote(message);
                if (progressMonitorQ.isCanceled() || qtask.isDone())
                    Toolkit.getDefaultToolkit().beep();
                if (progressMonitorQ.isCanceled()) {
                    qtask.cancel(true);
                }
                
                
            }
        }
    }
    
    private void openDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDatabaseActionPerformed
        databaseFile = getTextFile(new FileNameExtensionFilter("Outline Database", "odb", "otl"));
        
        //System.out.println("Database file is being openned.");
        
        if(databaseFile!=null) {
            //showMessage("Opening database hit");
            osl = null;
            progressMonitorO = new ProgressMonitor(this, "Opening database. It may take a few minutes to process the leaf coordinates.", "", 0, 100);
            progressMonitorO.setProgress(0);
            otask = new OpenTask();
            otask.addPropertyChangeListener(this);
            otask.execute();
            //otask=null;
        } else {
            showMessage("No database file opened.");
        }
        
        
    }//GEN-LAST:event_openDatabaseActionPerformed
    
    
    
    private void prepareSpeciesDatabase(boolean recreateDatabase) throws Exception {
        //System.out.println("In prepareSpeciesDatabase");
        if(recreateDatabase) {
            speciesDatabase=null;
            speciesDatabase=new Hashtable();
            //int tot=0;
            while(osl.previous!=null) {
                osl=osl.previous;
                //  tot++;
            }
            int cnt=0;
            while(osl.next!=null) {
                //setProgress((int)(((double)cnt/(double)tot)*(double)50)+50);
                cnt++;
                //System.out.println("In while loop looking for " + osl.taxon + ".");
                System.out.println("Working on leaf " + cnt + ": " + osl.taxon);
                Species t = (Species)speciesDatabase.get(osl.taxon);
                if(t==null) {
                    t=new Species(osl.taxon,osl.coordinates,this);
                    //System.out.println("The x,y for leaf 0 osl are: " + osl.coordinates[0][0] + "," + osl.coordinates[1][0]);
                    //System.out.println("The x,y for leaf 0 are: " + t.outlines.coordinates[0][0] + "," + t.outlines.coordinates[1][0]);
                    
                } else {
                    t.appendCoordinates(osl.taxon,osl.coordinates);
                    //System.out.println("The x,y for leaf are xx: " + t.outlines.coordinates[0][0] + "," + t.outlines.coordinates[1][0]);
                }
                
                speciesDatabase.put(osl.taxon,t);
                osl=osl.next;
            }
            
            //handle last one
            Species t = (Species)speciesDatabase.get(osl.taxon);
            if(t==null) {
                t=new Species(osl.taxon,osl.coordinates,this);
                //System.out.println("The x,y for leaf 0 are: " + t.outlines.coordinates[0][0] + "," + t.outlines.coordinates[1][0]);
            } else {
                t.appendCoordinates(osl.taxon,osl.coordinates);
                //System.out.println("The x,y for leaf are: " + t.outlines.coordinates[0][0] + "," + t.outlines.coordinates[1][0]);
            }
            
            speciesDatabase.put(osl.taxon,t);
        }
        
        
        
        Set keys = speciesDatabase.keySet();
        Iterator iter = keys.iterator();
        while (iter.hasNext()) {
            Species t1 = (Species)speciesDatabase.get(iter.next());
            //System.out.println("Working on species " + t1.name);
            t1.prepareCoordinates();
            speciesDatabase.put(t1.name,t1);
        }
    }
    
    private void openCoordinatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCoordinatesActionPerformed
        
        ccf = getTextFile(new FileNameExtensionFilter("Outline File", "otl"));
        OutlinesList tosl = Outlines.inputCoordinatesFromFile(ccf.getPath(), '\t');
        setInformation(tosl);
        
        System.out.println(ccf.getPath() + " Path of coordinates file.");
        if(ccf!=null) // || ccfc!=null) {
        {
            cif=null;
            //   cifc=null;
            if(oo!=null) oo.dispose();
            if(fi!=null) fi.dispose();
            if(or!=null) or.dispose();
            if(oiv!=null) oiv.dispose();
            if(oo.p!=null) {
                this.saveCoordinates.setEnabled(true);
                this.findOutlines.setEnabled(false);
                this.makeOutlineImage.setEnabled(true);
                this.outlineImageW.setEnabled(false);
                this.outlineRenderW.setEnabled(false);
                this.saveOutlineImage.setEnabled(false);
                this.outlineOrganizerW.setEnabled(true);
                this.fileInformationW.setEnabled(true);
                this.appendDatabase.setEnabled(true);
                this.createDatabase.setEnabled(true);
                
                if(osl!=null) this.performSearch.setEnabled(true);
            }
            System.out.println(ccf.getPath() + " In if");
            openOutlineOrganizerWindow();
        }
    }//GEN-LAST:event_openCoordinatesActionPerformed
    
    public void setInformation(OutlinesList tosl) {
        if(tosl==null) return;
        
        //System.out.println("Begin organizer");
        
        oo=new outlineOrganizer(this);
        fi=new fileInformation();
        
        //System.out.println("Begin count outlines");
        int cnt = 0;
        while(tosl.previous!=null) tosl = tosl.previous;
        while(tosl.next!=null) {
            tosl = tosl.next;
            cnt++;
        }
        cnt++;
        
        //System.out.println("Begin set file infomration");
        fi.dimensionality = tosl.dimensionality;
        fi.dimensionalityText.setText(Integer.toString(fi.dimensionality));
        fi.initials=tosl.label;
        fi.initialsText.setText(fi.initials);
        fi.part=tosl.part_name;
        fi.partText.setText(fi.part);
        fi.pixelsPerCentimeter=tosl.pixelPerCentimeter;
        fi.pixelSizeText.setText(Double.toString(fi.pixelsPerCentimeter));
        fi.nOutlines=cnt;
        fi.numberText.setText(Integer.toString(cnt));
        fi.imageFilePath=tosl.imageFile;
        fi.imageText.setText(fi.imageFilePath);
        fi.species=tosl.taxon;
        fi.speciesText.setText(fi.species);
        
        //System.out.println("Begin set organizer information");
        oo.p=new Polygon[cnt];
        oo.pArea= new int[oo.p.length];
        oo.cSize = new double[oo.p.length];
        oo.keep = new boolean[oo.p.length];
        for(int i=0; i<oo.p.length; i++)
            oo.keep[i]=true;
        
        //System.out.println("Begin setting organizer pixels");
        int i=0;
        while(tosl.previous!=null) {
            oo.p[i] = Outlines.getPolygon(tosl.coordinates);
            oo.pArea[i] = tosl.pixelArea;
            oo.cSize[i] = tosl.centroidDistance;
            i++;
            tosl=tosl.previous;
        }
        oo.p[i] = Outlines.getPolygon(tosl.coordinates);
        if(oo.p!=null) {
            //System.out.println("Begin set internal organizer information");
            oo.setOutlineInformation();
            //System.out.println("Begin set organizer buttons");
            oo.setButtons();
            oo.outlineNumber.setText("Total outlines: " + oo.p.length);
        }
        
        Point p = Outlines.getPolygonsBox(oo.p);
        iw = p.x+20;
        ih = p.y+20;
    }
    
    private void appendDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appendDatabaseActionPerformed
        try {
            
            if(cif!=null) {
                String file = (String)added.get(cif.getPath());
                
                
                if(file==null) {
                    appendDatabase(true);
                    
                    added.put(cif.getPath(),"present");
                } else if(file.length()==0) {
                    appendDatabase(true);
                    
                    added.put(cif.getPath(),"present");
                } else showMessage("Outlines have already been added.");
                
            } else if(ccf!=null) {
                String file = (String)added.get(ccf.getPath());
                
                
                if(file==null) {
                    appendDatabase(true);
                    
                    added.put(ccf.getPath(),"present");
                } else if(file.length()==0) {
                    appendDatabase(true);
                    
                    added.put(ccf.getPath(),"present");
                } else showMessage("Outlines have already been added.");
                
            }
            /*else if(cifc!=null) {
                String file = (String)added.get(cifc.getName());
             
                if(file==null) {
                    appendDatabase(true);
                    added.put(cifc.getName(), "present");
                } else if(file.length()==0) {
                    appendDatabase(true);
                    added.put(cifc.getName(), "present");
                }
             
            } else if (ccfc!=null) {
             
                String file = (String)added.get(ccfc.getName());
             
                if(file==null) {
                    appendDatabase(true);
                    added.put(ccfc.getName(), "present");
                } else if(file.length()==0) {
                    appendDatabase(true);
                    added.put(ccfc.getName(), "present");
                }
             
            }
             */
            
            else showMessage("Outlines have already been added.");
        } catch(Exception e) { e.printStackTrace();}
        
        this.saveDatabase.setEnabled(true);
        if(oo.p!=null) this.performSearch.setEnabled(true);
        
    }//GEN-LAST:event_appendDatabaseActionPerformed
    
    private void appendDatabase(boolean append) throws Exception {
        if(oo.p==null) {
            showMessage("Database action failed. Outlines are not defined.");
        } else if(fi==null) {
            showMessage("Database action failed. Outline information must be defined.");
            openFileInformationWindow();
        } else if(fi.species==null || fi.imageText==null || fi.nOutlines<=0 || fi.part==null || fi.initials==null || fi.pixelsPerCentimeter<=0) {
            showMessage("Database action failed. Outline information must be defined.");
            openFileInformationWindow();
        }
        
        double[][] coordinates = Outlines.extractCoordinates(oo.p[0]);
        double centroidDistance = 0;
        int pixelArea = 0;
        
        if(!append) {
            osl=null;
            speciesDatabase=null;
        }
        if(osl!=null)
            while(osl.next!=null)
                osl=osl.next;
        
        String species = fi.species;
        String imageText = fi.imageText.getText();
        double pixelSize = Double.parseDouble(fi.pixelSizeText.getText());
        String initials = fi.initialsText.getText();
        String part = fi.partText.getText();
        int normCent=0;
        int dimensionality=fi.dimensionality;
        OutlinesList nosl=null;
        for(int i=0;i<oo.p.length;i++) if(oo.keep[i]) {
            System.out.println("Appending leaf " + i + " of species " + species + " to database.");
            coordinates = Outlines.extractCoordinates(oo.p[i]);
            if(oo.cSize[i]<=0)
                centroidDistance = Outlines.findCentroidDistance(coordinates);
            else
                centroidDistance = oo.cSize[i];
            if(oo.pArea[i]<=0)
                pixelArea = Outlines.findArea(oo.p[i]);
            else
                pixelArea = oo.pArea[i];
            if(osl==null) {
                osl=new OutlinesList(species, imageText, centroidDistance, pixelArea, pixelSize,(initials+i),oo.p[i].npoints,part,0,dimensionality,coordinates);
                Species t = new Species(species,osl.coordinates,this);
                speciesDatabase=new Hashtable();
                speciesDatabase.put(species,t);
            } else {
                nosl = new OutlinesList(species, imageText, centroidDistance, pixelArea, pixelSize,(initials+i),oo.p[i].npoints,part,0,dimensionality,coordinates);
                osl.next = nosl;
                nosl.previous=osl;
                osl=osl.next;
                if(speciesDatabase==null) throw new Exception("Species database has not been initialized for some reason.");
                Species t = (Species)speciesDatabase.get(species);
                if(t==null) {
                    
                    t=new Species(species,osl.coordinates,this);
                    
                } else {
                    t.appendCoordinates(species,osl.coordinates);
                }
                t.prepareCoordinates();
                speciesDatabase.put(species,t);
            }
        }
        if(!append) showMessage("Database has been created. Prior database replaced.");
        else showMessage("Database has been appended.");
    }
    
    private void saveLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLogActionPerformed
        fileType = "log";
        saveFile();
        //fileType = null;
    }//GEN-LAST:event_saveLogActionPerformed
    
    private void saveOutlineImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutlineImageActionPerformed
        fileType = "ri";
        saveFile();
        //fileType = null;
    }//GEN-LAST:event_saveOutlineImageActionPerformed
    
    private void saveDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDatabaseActionPerformed
        fileType = "odb";
        saveFile();
        //fileType = null;
    }//GEN-LAST:event_saveDatabaseActionPerformed
    
    private void saveCoordinatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCoordinatesActionPerformed
        fileType= "otl";
        saveFile();
        //fileType = null;
    }//GEN-LAST:event_saveCoordinatesActionPerformed
    
    private void showMessage(String text) {
        JOptionPane.showMessageDialog(this,text);
    }
    
    private String makeOutlineText() {
        String out = new String();
        for(int i=0; i<oo.p.length;i++) if(oo.keep[i]) {
            out += fi.species + "\t" +
                    fi.initials + "\t" +
                    fi.part + "\t" +
                    oo.p[i].npoints + "\t" +
                    fi.dimensionality +
                    "\t0\t" +
                    Outlines.findArea(oo.p[i]) + "\t" +
                    fi.pixelsPerCentimeter + "\t" +
                    fi.imageFilePath + "\t";
            for(int j=0;j<oo.p[i].npoints;j++) {
                out += oo.p[i].xpoints[j] + "\t" + oo.p[i].ypoints[j] + "\t";
            }
            out += "\n";
        }
        return out;
    }
    
    private String generateOutlineFileText() {
        if(oo.p==null) {
            showMessage("Saving file failed. Outlines are not defined.");
            return new String();
        } else if(fi==null) {
            showMessage("Saving file failed. Outline information must be defined.");
            openFileInformationWindow();
            return new String();
        } else if(fi.species==null || fi.imageText==null || fi.nOutlines<=0 || fi.part==null || fi.initials==null || fi.pixelsPerCentimeter<=0) {
            showMessage("Saving file failed. Outline information must be defined.");
            openFileInformationWindow();
            return new String();
        }
        
        return makeOutlineText();
    }
    
    /*
    private String[] generateDatabaseFileText(WriteTask wt) {
        int dbSize=0;
     
        String[] output;
     
        if(osl==null) {
            showMessage("No database is loaded. No database saved.");
            return null;
        }
        while(osl.previous!=null) osl = osl.previous;
        while(osl.next!=null) {
            osl = osl.next;
            dbSize++;
        }
        while(osl.previous!=null) osl = osl.previous;
        if(osl==null) System.out.println("Error recovering database coordinate information");
        output = new String[dbSize];
        System.out.println("Writing coordinate information");
        output[0] = Outlines.coordinateInformation(osl);
        int cnt=1;
        while(osl.next!=null) {
            osl=osl.next;
            System.out.println("Writing coordinate information");
            output[cnt] = Outlines.coordinateInformation(osl);
            cnt++;
        }
        return output;
    }
     
     **/
    
    public void writeFile(String file, String[] content) {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(file));
            for(int i=0; i<content.length; i++)
                out.write(content[i]);
            out.close();
        } catch (IOException e) {
        }
    }
    
    public void writeFile(String file, String content) {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(file));
            out.write(content);
            out.close();
        } catch (IOException e) {
        }
    }
    
    /*
    public FileContents[] getTextFilesC(String[] formats) {
        FileOpenService fos;
     
        try {
            fos = (FileOpenService)ServiceManager.lookup("javax.jnlp.FileOpenService");
        } catch (UnavailableServiceException e) {
            fos = null;
        }
     
        if (fos != null) {
            try {
                // ask user to select multiple files through this service
                return fos.openMultiFileDialog(null, formats);
            } catch (Exception e) {
                e.printStackTrace();
            }
     
        }
        return null;
    }
     **/
    
    public File[] getTextFiles(FileFilter ff) {
        
        
        
        
        fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        
        //Add a custom file filter and disable the default
        //(Accept All) file filter.
        if(ff!=null) {
            fc.setFileFilter(ff);
            fc.setAcceptAllFileFilterUsed(false);
        }
        
        
        //Show it.
        int returnVal = fc.showDialog(this,"Open");
        
        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return(fc.getSelectedFiles());
            
        } else {
            ol.loggerTextArea.append("Opening file cancelled by user.\n");
        }
        //Reset the file chooser for the next time it's shown.
        //fc.setSelectedFile(null);
        fc.setVisible(true);
        
        return null;
    }
    
    public File getTextFile(FileFilter ff) {
        
        fc = new JFileChooser();
        
        //Add a custom file filter and disable the default
        //(Accept All) file filter.
        if(ff!=null) {
            fc.setFileFilter(ff);
            fc.setAcceptAllFileFilterUsed(false);
        }
        
        
        //Show it.
        int returnVal = fc.showDialog(this,"Open");
        
        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return(fc.getSelectedFile());
            
        } else {
            ol.loggerTextArea.append("Opening file cancelled by user.\n");
        }
        //Reset the file chooser for the next time it's shown.
        //fc.setSelectedFile(null);
        fc.setVisible(true);
        return null;
    }
    
    public void saveFile() {
        
        
        /*
        FileSaveService fss = null;
         
         
        try {
         
            fss = (FileSaveService)ServiceManager.lookup
                    ("javax.jnlp.FileSaveService");
        } catch (UnavailableServiceException e) {
            fss = null;
         
        }
         
        if (fss != null) {
            try {
         
         
                FileContents newfc2 = fss.saveAsFileDialog(null, null, databaseFilec);
         
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
         */
        fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            wfile = fc.getSelectedFile();
            progressMonitorW = new ProgressMonitor(this,"Saving file","", 0, 100);
            progressMonitorW.setProgress(0);
            taskType = "write database";
            wtask = new WriteTask();
            wtask.addPropertyChangeListener(this);
            wtask.execute();
            showMessage("Beep will sound when file saving is complete.");
            wtask = null;
        }
        fc = null;
        //}
    }
    
    private void outlineRenderWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineRenderWActionPerformed
        openRenderedOutlinesWindow();
        outlineRenderW.setEnabled(true);
    }//GEN-LAST:event_outlineRenderWActionPerformed
    
    private void makeOutlineImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeOutlineImageActionPerformed
        bi=Outlines.renderOutlineImage(oo.p,iw,ih,oo.keep);
        openRenderedOutlinesWindow();
        outlineRenderW.setEnabled(true);
        saveOutlineImage.setEnabled(true);
    }//GEN-LAST:event_makeOutlineImageActionPerformed
    
    private void logWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logWActionPerformed
        openLogWindow();
    }//GEN-LAST:event_logWActionPerformed
    
    private void outlineImageWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineImageWActionPerformed
        if(cif!=null) // || cifc!=null)
            openImage();
        
    }//GEN-LAST:event_outlineImageWActionPerformed
    
    private void outlineOrganizerWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlineOrganizerWActionPerformed
        openOutlineOrganizerWindow();
    }//GEN-LAST:event_outlineOrganizerWActionPerformed
    
    public void openRenderedOutlinesWindow() {
        ImageIcon icon = new ImageIcon(bi);
        if(or!=null) {
            or.dispose();
            or=null;
        }
        or = new outlineRendered();
        or.renderedOutlines.setIcon(icon);
        or.setVisible(true);
        mainDesktop.add(or);
        try {
            or.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {}
    }
    
    public void openImage(File file) {
        
        ImageIcon icon = new ImageIcon(file.getPath());
        if(oiv!=null) {
            oiv.dispose();
            oiv=null;
        }
        oiv = new outlineImageViewer();
        oiv.imageLabel.setIcon(icon);
        oiv.setVisible(true);
        mainDesktop.add(oiv);
        try {
            oiv.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {}
        
    }
    
    public void openImage() {
        
        ImageIcon icon=null;
        
        
/*        if(cifc!=null) {
            try {
                icon = new ImageIcon((Image)ImageIO.read(cifc.getInputStream()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
 */
        icon = new ImageIcon(cif.getPath());
        //     }
        if(icon!=null) {
            
            if(oiv!=null) {
                oiv.dispose();
                oiv=null;
            }
            oiv = new outlineImageViewer();
            oiv.imageLabel.setIcon(icon);
            oiv.setVisible(true);
            mainDesktop.add(oiv);
            try {
                oiv.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {}
        } else {
            showMessage("Could not make image icon");
        }
        
    }
    
    
    
    public void openLogWindow() {
        if(ol==null) {
            ol = new outlineLogger("Welcome\n" + Utils.getDate() + "\n");
        } else
            ol.dispose();
        ol.setVisible(true);
        mainDesktop.add(ol);
        try {
            ol.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {}
    }
    
    private void openOutlineOrganizerWindow() {
        try {
            
            if(cif!=null) {
                if(oo!=null) oo.dispose();
                oo=null;
                oo = new outlineOrganizer(Outlines.findCoordinates(cif), this);
            }
            //}
            /*else if(cifc!=null) {
                if(oo!=null) oo.dispose();
                oo=null;
                oo = new outlineOrganizer(Outlines.findCoordinates(cifc.getInputStream()), this);
            }
             */
            
            if(oo!=null) {
                oo.setVisible(true);
                mainDesktop.add(oo);
                try {
                    oo.setSelected(true);
                } catch (java.beans.PropertyVetoException e) {}
                this.makeOutlineImage.setEnabled(true);
            }
        } catch(Exception e) { e.printStackTrace(); }
    }
    
    private void openFileInformationWindow() {
        try{
            if(fi!=null) fi.dispose();
            else if(fi==null) { fi = new fileInformation(); }
            
            if(cif!=null) fi.imageFilePath=cif.getPath();
            //else if(cifc!=null) fi.imageFilePath = cifc.getName();
            if(oo!=null) {
                fi.nOutlines=oo.keptOutlines();
                fi.dimensionality=2;
                
                fi.dimensionalityText.setText(Integer.toString(fi.dimensionality));
                fi.numberText.setText(Integer.toString(fi.nOutlines));
                fi.imageText.setText(fi.imageFilePath);
                
                fi.setVisible(true);
                mainDesktop.add(fi);
                try {
                    fi.setSelected(true);
                } catch (java.beans.PropertyVetoException e) {}
            } else {
                this.showMessage("Error finding outlines. Please make sure objects are on clean white background.");
            }
            
            
        } catch(Exception e) { e.printStackTrace(); }
        
        // TODO add your handling code here:
    }
    
    private void fileInformationWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileInformationWActionPerformed
        openFileInformationWindow();
    }//GEN-LAST:event_fileInformationWActionPerformed
    
    private void findOutlinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findOutlinesActionPerformed
        
        openOutlineOrganizerWindow();
        openFileInformationWindow();
        if(oo!=null) {
            
            saveCoordinates.setEnabled(true);
            makeOutlineImage.setEnabled(true);
            //addOutlines.setEnabled(true);
            appendDatabase.setEnabled(true);
            createDatabase.setEnabled(true);
            
            outlineOrganizerW.setEnabled(true);
            fileInformationW.setEnabled(true);
            //outlineRenderW.setEnabled(true);
        }
        if(osl!=null)
            if(oo.p!=null) this.performSearch.setEnabled(true);
        if(or!=null) {
            or.dispose();
            or=null;
        }
        
        
    }//GEN-LAST:event_findOutlinesActionPerformed
    
    private void quitOutlinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitOutlinesActionPerformed
        System.exit(0);
        
    }//GEN-LAST:event_quitOutlinesActionPerformed
    
    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed
    
    private void openImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageActionPerformed
        ImageIcon icon = null;
        
        /*
        FileOpenService fos=null;
         
        try {
            fos = (FileOpenService)ServiceManager.lookup("javax.jnlp.FileOpenService");
        } catch (UnavailableServiceException e) {
            fos = null;
        }
         
        if (fos != null) {
            try {
         
                // get a FileContents object to work with from the
                // FileOpenService
                cifc = fos.openFileDialog(null, null);
         
                // get the InputStream from the file and read a few bytes
                byte [] buf = new byte[(int)cifc.getLength()];
                InputStream is = cifc.getInputStream();
                int pos = 0;
                while ((pos = is.read(buf, pos, buf.length - pos)) > 0) {
                    // just loop
                }
                is.close();
                icon = new ImageIcon(buf);
            } catch (Exception e) {
                e.printStackTrace();
            }
         
        }
         
        else {
         */
        ImageChooser ic = new ImageChooser(this, ol);
        //}
        /*
        if(icon!=null) {
         
            if(oiv!=null) {
                oiv.dispose();
                oiv=null;
            }
            oiv = new outlineImageViewer();
            oiv.imageLabel.setIcon(icon);
            oiv.setVisible(true);
            mainDesktop.add(oiv);
            try {
                oiv.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {}
        } else {
            showMessage("Could not make image icon");
        }
         */
        
        if(cif!=null) {
            iw = ImageInfo.imageWidth(cif.getPath());
            ih = ImageInfo.imageHeight(cif.getPath());
        }
        /*
        if(cifc!=null) {
            try {
         
                iw = ImageInfo.imageWidth(cifc.getInputStream());
                ih = ImageInfo.imageHeight(cifc.getInputStream());
            } catch(Exception e) { e.printStackTrace(); iw=0; ih=0; showMessage("Error retrieving image dimensions");}
        }
         */
        if(cif!=null) // || cifc!=null) {
        {
            
            //openImage(); //handled by ImageChooser
            findOutlines.setEnabled(true);
            outlineImageW.setEnabled(true);
            
            fileInformationW.setEnabled(false);
            outlineRenderW.setEnabled(false);
            saveOutlineImage.setEnabled(false);
            saveCoordinates.setEnabled(false);
            makeOutlineImage.setEnabled(false);
            appendDatabase.setEnabled(false);
            createDatabase.setEnabled(false);
            this.performSearch.setEnabled(false);
            
            
            if(fi!=null) {
                fi.dispose();
                fi=null;
            }
            if(oo!=null) {
                oo.dispose();
                oo=null;
            }
            if(or!=null) {
                or.dispose();
                or=null;
            }
            if(bi!=null)
                bi=null;
        }
        
        
        
    }//GEN-LAST:event_openImageActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame.setDefaultLookAndFeelDecorated(true);
                outlineMain om = new outlineMain();
                om.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                om.setVisible(true);
                om.ol = new outlineLogger("Welcome\n" + Utils.getDate() + "\n");
                
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Batch;
    private javax.swing.JMenu Database;
    private javax.swing.JMenu Open;
    private javax.swing.JMenu Save;
    private javax.swing.JMenu actionMenu;
    private javax.swing.JMenuItem appendDatabase;
    private javax.swing.JMenuItem createDatabase;
    private javax.swing.JMenuItem fileInformationW;
    private javax.swing.JMenu fileMenu;
    public javax.swing.JMenuItem findOutlines;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem logW;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JMenuBar mainMenu;
    public javax.swing.JMenuItem makeDatabaseFromCoordinates;
    private javax.swing.JMenuItem makeDatabaseFromImages;
    private javax.swing.JMenuItem makeOutlineImage;
    public javax.swing.JMenuItem openCoordinates;
    private javax.swing.JMenuItem openDatabase;
    private javax.swing.JMenuItem openImage;
    private javax.swing.JMenuItem outlineHelp;
    private javax.swing.JMenuItem outlineImageW;
    private javax.swing.JMenuItem outlineOrganizerW;
    private javax.swing.JMenuItem outlineRenderW;
    private javax.swing.JMenuItem outlineSearchResultsW;
    private javax.swing.JMenuItem performSearch;
    private javax.swing.JMenuItem quitOutlines;
    private javax.swing.JMenuItem saveCoordinates;
    private javax.swing.JMenuItem saveDatabase;
    private javax.swing.JMenuItem saveLog;
    private javax.swing.JMenuItem saveOutlineImage;
    private javax.swing.JMenuItem saveSearchResults;
    private javax.swing.JMenuItem uploadToDatabase;
    private javax.swing.JMenu windowsMenu;
    // End of variables declaration//GEN-END:variables
    
}
